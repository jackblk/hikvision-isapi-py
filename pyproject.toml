[project]
name = "hikvision-isapi-py"

description = "HIKVision ISAPI python library"
dynamic = ["readme"]
version = "0.1.6"


requires-python = ">=3.8"

dependencies = [
  "requests",
]
[project.optional-dependencies]
dev = [
  "black",
  "build",
  "flake8",
  "isort",
  "tbump",
]

[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools>=61", "setuptools-scm"]

[tool.setuptools]

include-package-data = true
packages = ["hikvision_isapi"]

[tool.setuptools.dynamic]
readme = { file = ["README.txt"], content-type = "text/markdown" }

############### tbump ###############
[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.1.6"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[tool.tbump.file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "pyproject.toml"

# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

#  [[tool.tbump.before_commit]]
#  name = "check changelog"
#  cmd = "grep -q {new_version} Changelog.rst"

# Or run some commands after the git tag and the branch
# have been pushed:
#  [[tool.tbump.after_push]]
#  name = "publish"
#  cmd = "./publish.sh"
